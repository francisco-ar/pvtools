# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_utils.missing.ipynb (unless otherwise specified).

__all__ = ['plot_missing', 'std_outliers', 'diff_outliers', 'is_day', 'comp', 'view_anomaly']

# Cell
from ..imports import *
from .pandas_hacks import *
from sklearn.base import TransformerMixin

# Cell
def plot_missing(df: DataFrame, f:Callable[[DataFrame], DataFrame]=pd.isna, ghi_col:Optional[Union[str, tuple]]=None):
    "Plot data that satisfies the f function, optional ghi_col to exclude night"
    if ghi_col is not None:
        df = df[df[ghi_col]>10]
    cols = df.columns
    n = len(cols)
    _, ax = plt.subplots(figsize=(15,n*0.3))
    outliers = f(df)
    ax.matshow(outliers.T, interpolation=None, aspect='auto')
    xticks = np.arange(0, len(outliers), int(len(outliers)/7))
    ax.set_xticks(xticks)
    ax.set_xticklabels([outliers.index[i].strftime('%d-%m-%Y') for i in xticks])
    ax.set_yticks(range(n))
    ytickslabels = [str(name)+f' ({100*outliers[name].sum()/len(outliers[name]):.3f}%)' for name in cols.values]
    ax.set_yticklabels(ytickslabels)
    return

# Cell
def std_outliers(mean=0, std=1, std_coef=3):
    def _inner(df): return (np.abs(df-mean)>std_coef*std)
    return _inner

def diff_outliers(std=1, std_coef=2):
    def _inner(df): return (df.diff().abs()>std_coef*std)
    return _inner

def is_day(ghi_col='ghi'):
    def _inner(df): return df.loc[All, ghi_col]>0
    return _inner

# Cell
def comp(l):
    def _inner(df): return reduce(operator.or_, [f(df) for f in l])
    return _inner

# Cell
def view_anomaly(s: Series, f=std_outliers(0,1,3)):
    "Plots the missing/anomaly points"
    _, ax = plt.subplots(figsize=(14,6))
    a = f(s)
    ax.set_title(f' Anomaly rate: ({100*a.values.sum()/len(s):.3f}%)')
    ax.plot(s, color='blue', label = 'Normal')
    ax.scatter(a[a].index, s[a].fillna(0), color='red', label = 'Anomaly')
    ax.legend()
    return ax