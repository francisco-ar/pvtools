# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/07_modelling.mypvfactors.ipynb (unless otherwise specified).

__all__ = ['system_def', 'get_index', 'debug_pvarray', 'join_sun']

# Cell
from ..imports import *
from ..utils.tmy import *
import pvfactors
from pvfactors.geometry import OrderedPVArray
import pvlib

# Cell
def system_def(albedo: float=0.4,
               n_modules_vertically: int=2,
               module_size: tuple=(1.69,1.01),
               h_ground: float=1,
               surface_tilt: int=38,
               axis_azimuth: int=0,
               surface_azimuth: int=180,
               n_pvrows: int=1,
               tracking: bool=False,
               gcr: float=0.5):
    "A wrapper function to define the pvfactors pvarray_parameters dictionary"
    w_m, h_m = module_size  #width x height of module
    if not tracking: h_center = h_ground + np.sin(2*np.pi*surface_tilt/360)*h_m
    else: h_center = h_ground
    pvarray_parameters = {
        'n_pvrows': n_pvrows,            # number of pv rows
        'pvrow_height': h_center,        # height of pvrows (measured at center / torque tube)
        'pvrow_width': n_modules_vertically * h_m,         # width of pvrows
        'tracking':tracking,
        'axis_azimuth': axis_azimuth,       # azimuth angle of rotation axis
        'surface_tilt': surface_tilt,      # tilt of the pv rows
        'surface_azimuth': surface_azimuth,   # azimuth of the pv rows front surface
        'albedo':albedo,
        'gcr': gcr,               # ground coverage ratio,
        'rho_front_pvrow': 0.075,  # pv row front surface reflectivity
        'rho_back_pvrow': 0.075,    # pv row back surface reflectivity
        'cut':{
            i: {'front': 1,'back': 7} for i in range(n_pvrows) # discretize the front  PV row into 3 segments and back in 5
    }
    }
    return pvarray_parameters

# Cell
def get_index(df, date): return df.index.get_loc(date)

# Cell
def debug_pvarray(data:DataFrame, pvarray_parameters:dict, date:Union[str, int], with_index:bool=False):
    "Method to debug a pvfactors pvarray, plots the model at idx"
    data_idx = df.loc[date] if type(date) is str else df.iloc[date]
    params = {'axis_azimuth': pvarray_params['axis_azimuth'],
             'gcr': pvarray_params['gcr'],
             'n_pvrows': pvarray_params['n_pvrows'],
             'pvrow_height': pvarray_params['pvrow_height'],
             'pvrow_width': pvarray_params['pvrow_width'],
             'solar_azimuth': data_idx['azimuth'],
             'solar_zenith': data_idx['zenith'],
             'surface_azimuth': pvarray_params['surface_azimuth'],
             'surface_tilt': pvarray_params['surface_tilt'],
             'cut':pvarray_params['cut']}
    pvarray = OrderedPVArray.fit_from_dict_of_scalars(params)
    _, ax = plt.subplots(figsize=(10, 3))
    pvarray.plot_at_idx(0, ax, with_surface_index=with_index)
    plt.show()
    return pvarray

# Cell
def join_sun(tmy_data: DataFrame, sunpos:DataFrame, pvarray_params:dict)->DataFrame:
    "Concats meteo data with sunpos"
    data = pd.DataFrame(index=tmy_data.index)
    data['ghi'] = tmy_data.ghi
    data['dni'] = tmy_data.dni
    data['dhi'] = tmy_data.dhi
    data['zenith'] = sunpos.zenith
    data['azimuth'] = sunpos.azimuth
    data['elevation'] = sunpos.elevation
    data['surface_tilt'] = pvarray_params['surface_tilt']
    data['surface_azimuth'] = pvarray_params['surface_azimuth']
    data['albedo'] =  pvarray_params['albedo']
    #doing some patching
    idxs = (data.zenith<90) & (data.ghi<10)
    data.loc[idxs, 'zenith'] = 91.
    return data